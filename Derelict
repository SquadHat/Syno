local linoria = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua"))()

local Window = linoria:CreateWindow({
    Title = 'Derelict',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local MainTab = Tabs.Main:AddLeftGroupbox('Main')
local LocalPlayer = game.Players.LocalPlayer
local Method = "Dodge"
local Delay = 0

local function AutoQ()
    AutoConnection = game:GetService("RunService").Stepped:Connect(function()
        for _, v in ipairs(game.Workspace.InstancedGeometry.Hitboxes:GetChildren()) do
            if v:IsA("BasePart") then
                local P = v:FindFirstChild("P")
                if P and tostring(P.Value) == LocalPlayer.Name then
                    local LocalPlayerX = v
                    local LocalPlayerY = string.split(LocalPlayerX.Name, "-")[1]
                    for _, x in ipairs(game.Workspace.InstancedGeometry.Hitboxes:GetChildren()) do
                        if x:IsA("BasePart") and x ~= LocalPlayerX then
                            local HumanoidAttributes = x:FindFirstChild("HumanoidAttributes")
                            if HumanoidAttributes and HumanoidAttributes:IsA("Folder") then
                                local CHoldingModelState = HumanoidAttributes:GetAttribute("CHoldingModelState")
                                local MainTarget = HumanoidAttributes:GetAttribute("MainTarget")
                                local Multiple = false
                                local AttackTime = 0
                                if CHoldingModelState == "Attack" then
                                    AttackTime = tick()
                                    Multiple = true
                                end
                                if Multiple then
                                    if (tick() - AttackTime) > 0.5 then
                                        Multiple = false
                                    end
                                end
                                if (Multiple or MainTarget == LocalPlayerY) and CHoldingModelState == "Attack" then
                                    if (LocalPlayerX.Position - x.Position).Magnitude <= 100 then
                                        wait(Delay)
                                        if Method == "Dodge" then
                                            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Q, false, nil)
                                            game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Q, false, nil)
                                        else
                                            game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 1, true, nil, 0)
                                            game:GetService("VirtualInputManager"):SendMouseButtonEvent(0, 0, 1, false, nil, 0)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
end

MainTab:AddToggle('Auto', {
    Text = 'Auto',
    Default = false,
    Tooltip = 'Automatically dodge or block attacks.',
    Callback = function(Value)
        v = Value
        if v then
            AutoQ()
        else
            if AutoConnection then
                AutoConnection:Disconnect()
            end
        end
    end
})

MainTab:AddLabel('')

MainTab:AddSlider('Delay', {
    Text = 'Delay',
    Default = 0,
    Min = 0,
    Max = 3,
    Rounding = 2,
    Callback = function(Value)
        Delay = Value
    end
})

MainTab:AddLabel('')

MainTab:AddDropdown('Method', {
    Values = { 'Dodge', 'Block' },
    Default = 1,
    Multi = false,
    Text = 'Method',
    Callback = function(Value)
        Method = Value
    end
})

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() linoria:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'T', NoUI = true, Text = 'Menu keybind' })
linoria.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(linoria)
SaveManager:SetLibrary(linoria)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
SaveManager:SetFolder('Pressure/Pressured')
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:BuildConfigSection(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
